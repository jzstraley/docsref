@use "sass:list";
@use "sass:map";
@use "sass:math";
@use "sass:meta";
@use 'sass:string';

/// Breakpoints for responsive design
$break-devices: (
  mobile: (
    portrait: (220px, 479px),
    landscape: (480px, 719px)
  ),
  tablet: (
    portrait: (720px, 959px),
    landscape: (960px, 1219px)
  ),
  screen: (
    small: (1220px, 1599px),
    medium: (1600px, 1999px),
    large: (2000px,) // Note: still a list
  )
);
// -----------------------------------------------------------------------------
// Helper Functions
// -----------------------------------------------------------------------------

/// Select min/max from list or nested maps
@function break-select-min-max($devices) {
  $min: 1000000;
  $max: 0;

  @each $key, $value in $devices {
    @while meta.type-of($value) == "map" {
      $value: break-select-min-max($value);
    }

    @if meta.type-of($value) == "list" {
      @each $number in $value {
        @if meta.type-of($number) == "number" {
          $min: math.min($min, $number);
          $max: math.max($max, $number);
        } @else {
          @error "Expected a number but got `#{$number}`.";
        }
      }
    } @else if meta.type-of($value) == "number" {
      $min: math.min($min, $value);
      $max: null;
    } @else {
      @error "Invalid value: #{$value}";
    }
  }

  @return (min: $min, max: $max);
}

/// Traverse device map using variadic path
@function break-select-device($device) {
  $current: $break-devices;

  @for $i from 1 through list.length($device) {
    @if meta.type-of($current) == "map" {
      $key: list.nth($device, $i);
      $current: map.get($current, $key);
    } @else {
      @error "Invalid device map at level #{$i}: #{$device}";
    }
  }

@if meta.type-of($current) == "list" or meta.type-of($current) == "number" {
    @return $current;
  } @else {
    @debug $device;
    @error "Device path `#{join($device, ', ')}` does not exist in $break-devices";
  }
}

// -----------------------------------------------------------------------------
// Mixins
// -----------------------------------------------------------------------------

@mixin break-at($breakpoint) {
  @if meta.type-of($breakpoint) == "number" {
    @media screen and (min-width: $breakpoint) {
      @content;
    }
  } @else if meta.type-of($breakpoint) == "map" {
    $min: map.get($breakpoint, min);
    $max: map.get($breakpoint, max);

    @media screen and (min-width: $min) and (max-width: $max) {
      @content;
    }
  } @else {
    @error "Invalid breakpoint: `#{$breakpoint}`";
  }
}

@mixin break-from-device($device...) {
  $range: break-select-device($device...);

  @if meta.type-of($range) == "map" {
    $min: map.get($range, min);
    @media screen and (min-width: $min) {
      @content;
    }
  } @else if meta.type-of($range) == "list" {
    $min: list.nth($range, 1);
    @media screen and (min-width: $min) {
      @content;
    }
  } @else if meta.type-of($range) == "number" {
    @media screen and (min-width: $range) {
      @content;
    }
  } @else {
    @error "Unsupported breakpoint range format for break-from-device";
  }
}

@mixin break-to-device($device...) {
  $range: break-select-device($device...);

  @if meta.type-of($range) == "map" {
    $max: map.get($range, max);
    @media screen and (max-width: $max) {
      @content;
    }
  } @else if meta.type-of($range) == "list" {
    $max: list.nth($range, 2);
    @media screen and (max-width: $max) {
      @content;
    }
  } @else if meta.type-of($range) == "number" {
    @media screen and (max-width: $range) {
      @content;
    }
  } @else {
    @error "Unsupported breakpoint range format for break-to-device";
  }
}

@mixin break-at-device($device...) {

  $range: break-select-device($device...);
  $min: null;
  $max: null; // <-- initialize here!

  @if meta.type-of($range) == "map" {
    $min: map.get($range, min);
    $max: map.get($range, max);
  } @else if meta.type-of($range) == "list" {
    $min: list.nth($range, 1);
    $max: if(list.length($range) > 1, list.nth($range, 2), null);
  } @else if meta.type-of($range) == "number" {
    $min: $range;
    $max: null;
  } @else {
    @error "Unsupported breakpoint range format for break-at-device";
  }

  @if $max != null {
    @media screen and (min-width: $min) and (max-width: $max) {
      @content;
    }
  } @else {
    @media screen and (min-width: $min) {
      @content;
    }
  }
}

@mixin break-at-orientation($orientation) {
  @if $orientation == "portrait" or $orientation == "landscape" {
    @media screen and (orientation: #{$orientation}) {
      @content;
    }
  } @else {
    @error "Orientation must be `portrait` or `landscape`, got `#{$orientation}`";
  }
}

@mixin break-at-ratio($ratio) {
  @if meta.type-of($ratio) == "number" {
    @media screen and (max-aspect-ratio: #{$ratio}) {
      @content;
    }
  } @else {
    @error "Aspect ratio must be a number, got `#{$ratio}`";
  }
}