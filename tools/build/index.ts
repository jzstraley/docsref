// tools/build/index.ts (Refactored for memory safety and modularity)

import { minify as minhtml } from "html-minifier-terser"
import * as path from "path"
import { EMPTY, concat, defer, from, map, mergeMap, of, switchMap, toArray } from "rxjs"
import { optimize } from "svgo"
import { firstValueFrom } from "rxjs"

import { IconSearchIndex } from "_/components"
import { base, read, resolve, watch, write } from "./_"
import { copyAll } from "./copy"
import { transformScript, transformStyle } from "./transform"

const CONCURRENCY = 4
const IS_WATCH = process.argv.includes("--watch")
const IS_ALL = process.argv.includes("--all")
const IS_DIRTY = process.argv.includes("--dirty")
const IS_OPTIMIZE = process.argv.includes("--optimize")

function minsvg(data: string): string {
  if (!data.startsWith("<")) return data
  const result = optimize(data, {
    plugins: [
      "preset-default",
      { name: "removeDimensions", active: true },
      { name: "removeViewBox", active: false },
    ]
  })
  return result.data
}

function ext(file: string, extension: string): string {
  return file.replace(path.extname(file), extension)
}

async function buildAssets() {
  const iconSets = [
    { from: "@mdi/svg/svg", to: ".icons/material", license: "../LICENSE" },
    { from: "@primer/octicons/build/svg", to: ".icons/octicons", license: "../../LICENSE" },
    { from: "@fortawesome/fontawesome-free/svgs", to: ".icons/fontawesome", license: "../LICENSE.txt" },
    { from: "simple-icons/icons", to: ".icons/simple", license: "../LICENSE.md" },
  ]

  for (const { from: fromDir, to, license } of iconSets) {
    await firstValueFrom(copyAll("**/*.svg", {
      from: `node_modules/${fromDir}`,
      to: `${base}/templates/${to}`,
      transform: async data => minsvg(data),
    }))

    await firstValueFrom(copyAll(license, {
      from: `node_modules/${fromDir}`,
      to: `${base}/templates/${to}`,
    }))
  }

  await firstValueFrom(copyAll("**/*.{jpg,png,svg,yml}", {
    from: "src",
    to: base,
  }))

  await firstValueFrom(copyAll("min/*.js", {
    from: "node_modules/lunr-languages",
    to: `${base}/templates/assets/javascripts/lunr`,
  }))
}

async function buildSources() {
  await firstValueFrom(copyAll("**/*.py", {
    from: "src",
    to: base,
    watch: IS_WATCH,
    transform: async (data, name) => {
      if (path.basename(name) === "__init__.py") {
        const metadata = require("../../package.json")
        return data.replace("$md-version$", metadata.version)
      }
      return data
    }
  }))
}

async function buildStyles() {
  const files = await firstValueFrom(resolve("**/[!_]*.scss", { cwd: "src" }).pipe(toArray()))
  for (const file of files) {
    await firstValueFrom(transformStyle({
      from: `src/${file}`,
      to: ext(`${base}/${file}`, ".css")
    }))
  }
}

async function buildScripts() {
  const files = await firstValueFrom(resolve("**/{custom,bundle,search}.ts", { cwd: "src" }).pipe(toArray()))
  for (const file of files) {
    await firstValueFrom(transformScript({
      from: `src/${file}`,
      to: ext(`${base}/${file}`, ".js")
    }))
  }
}

async function buildTemplates() {
  const metadata = require("../../package.json")
  const banner = "{#-\n  This file was automatically generated - do not edit\n-#}\n"

  await firstValueFrom(copyAll("**/*.html", {
    from: "src",
    to: base,
    watch: IS_WATCH,
transform: async data => {
  const normalized = data.replace(/\r\n/gm, "\n")
  const minified = await minhtml(normalized, {
    collapseBooleanAttributes: true,
    includeAutoGeneratedTags: false,
    minifyCSS: true,
    minifyJS: true,
    removeComments: true,
    removeScriptTypeAttributes: true,
    removeStyleLinkTypeAttributes: true,
  })

  return banner +
    minified
      .replace(/^\s*[\r\n]/gm, "")
      .replace("$md-name$", metadata.name)
      .replace("$md-version$", metadata.version)
}
  }))
}

async function buildOverrides() {
  // Placeholder: build index$, emojis$, icons$, schema$ like original script
  // Ideally move them to isolated scripts to reduce memory
}

async function run() {
  try {
    await buildAssets()
    await buildSources()
    async function buildStyles() {
    const files$ = resolve("**/[!_]*.scss", { cwd: "src" })

    await new Promise((resolve, reject) => {
        files$
        .pipe(
            mergeMap(file =>
            transformStyle({
                from: `src/${file}`,
                to: ext(`${base}/${file}`, ".css")
            }), CONCURRENCY // limit to N styles at a time
            )
        )
        .subscribe({
            complete: resolve,
            error: reject
        })
    })
    }
    await buildScripts()
    await buildTemplates()
    await buildOverrides()
  } catch (err) {
    console.error("Build failed:", err)
    process.exit(1)
  }
}

run()
